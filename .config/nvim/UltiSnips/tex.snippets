snippet _env "General Environment" iA
\begin{$1}
	$0
\end{$1}
endsnippet

snippet _eq "Equation Environment" iA
\begin{equation*}
	$0
\end{equation*}
endsnippet

snippet _mk "Inline Math" iA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

snippet '_intro(\w+[,\w+[\s\w]*]*)  ' "Intro Knowledge" riA
`!p
stringify = []
kldb_file='/home/jose/Documents/GithubProjects/phd-thesis/Documents/Write-Ups/personal_notes/kldb.tex'
add_knowledge_cmd='/home/jose/.local/scripts/add-knowledge '
count = 0
for x in match.group(1).split(","): 
  if(count == 0):
    first_arg = x
	count += 1
	stringify.append("\'" + x + "\'")
command = 'if ! grep ' + kldb_file + ' -e \'index=' + first_arg + '}\'; then ' + add_knowledge_cmd + ' '.join(stringify) + '; fi'
os.system(command)
snip.rv = '\\intro{' + first_arg + '}'
`$0
endsnippet

snippet _kl "Use Knowledge" iA
\\kl{${1}}$0
endsnippet

snippet _// "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

snippet _qall "Universal Quantifier" iA
\\qall{$1}{$2}$0
endsnippet

snippet _qex "Universal Quantifier" iA
\\qall{$1}{$2}$0
endsnippet

snippet '_prime(\d+)' "LaTeX array" riA
$1^{`!p
primes = ""
for _ in range(0, int(match.group(1))): primes += "\prime"
snip.rv = primes`}$0
endsnippet	

global !p
def create_matrix_placeholders(snip):
	anon_snippet_body = ""

	# Get start and end line number of expanded snippet
	start = snip.snippet_start[0]
	end = snip.snippet_end[0]

  # Append current line into anonymous snippet
	for i in range(start, end + 1):
		anon_snippet_body += snip.buffer[i]
		anon_snippet_body += "" if i == end else "\n"

	# Delete expanded snippet line till second to last line
	for i in range(start, end):
		del snip.buffer[start]

	# Empty last expanded snippet line while preserving the line
	snip.buffer[start] = ''

	# Expand anonymous snippet
	snip.expand_anon(anon_snippet_body)

def create_matrix(cols, rows, sep, start, end):
	res = ""
	placeholder = 1
	for _ in range(0, int(rows)):
		res += start + f"${placeholder} "
		placeholder += 1
		for _ in range(0, int(cols) - 1):
			res += sep + f" ${placeholder} "
			placeholder += 1
		res += end
	return res[:-1]
endglobal

post_jump "create_matrix_placeholders(snip)"
snippet '_matrix(\d+),(\d+)' "LaTeX array" br
\begin{array}{`!p
orient = ""
for _ in range(0, int(match.group(1))): orient += "l"
snip.rv = orient`}
`!p
snip.rv = create_matrix(match.group(1), match.group(2), "&", "\t", "\\\\\\\\\n")
`$0
\end{array}
endsnippet
