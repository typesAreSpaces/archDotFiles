# Math-related
priority 100
snippet ... "ldots" iA
\\dots$0
endsnippet

priority 100
snippet ;<= "Less than or Equal to" iA
\\leq$0
endsnippet

priority 100
snippet ;>= "Greather than or Equal to" iA
\\geq$0
endsnippet

snippet OO "Infinity" iA
\\infty$0
endsnippet

snippet ;sos "Sums of squares" iA
\\sum{$1}^2$0
endsnippet

snippet ;( "Parenthesis" iA
($1)$0
endsnippet

snippet ;sse "Subseteq" iA
$1 \\subseteq $2$0	
endsnippet

snippet ;sss "Subseteq" iA
$1 \\subset $2$0	
endsnippet

snippet ;NN "Natural Numbers" iA
\\mathbb{N}$0
endsnippet

snippet ;ZZ "Integer Numbers" iA
\\mathbb{Z}$0
endsnippet

snippet ;QQ "Rational Numbers" iA
\\mathbb{Q}$0
endsnippet

snippet ;RR "Real Numbers" iA
\\mathbb{R}$0
endsnippet

snippet ;CC "Complex Numbers" iA
\\mathbb{C}$0
endsnippet

snippet ;sum "Sum" iA
\\sum_{$1}^{$2}{$3}$0
endsnippet

snippet ;prod "Product" iA
\\sum_{$1}^{$2}{$3}$0
endsnippet

snippet ;lim "Limit" iA
\\lim_{$1 \to $2} $3$0
endsnippet

snippet ;Conj "Big Conjunction" iA
\\bigcap_{$1}^{$2}{$3}$0
endsnippet

snippet ;Disj "Big Disjunction" iA
\\bigcup_{$1}^{$2}{$3}$0
endsnippet

snippet ;AA "Universal Quantifier" iA
\\qall{$1}{$2}$0
endsnippet

snippet ;EE "Existential Quantifier" iA
\\qex{$1}{$2}$0
endsnippet

snippet ;norm "Norm" iA
\\langle $1 \\rangle$0
endsnippet

snippet ;-> "Arrow" iA
\\rightarrow$0
endsnippet

snippet ;<- "Left arrow" iA
\\leftarrow$0
endsnippet

snippet ;i-> "Injective Arrow" iA
\\xhookrightarrow$0
endsnippet

snippet ;s-> "Surjective Arrow" iA
\\twoheadrightarrow$0
endsnippet

snippet ;=> "Big Arrow" iA
\\Rightarrow$0 
endsnippet

snippet ;join "Join" iA
$1 \\downarrow_{$3} $2$0
endsnippet

snippet ;rrule "Right rule" iA
$2 \rightarrow_{$1} $3$0
endsnippet

snippet ;lrule "Left rule" iA
$2 \leftarrow_{$1} $3$0
endsnippet

snippet ;ideal "Ideal" iA
\\mathfrak{$1}$0
endsnippet

snippet ;field "Field" iA
\\mathscr{$1}$0
endsnippet

snippet ;ring "Ring" iA
\\mathcal{$1}$0
endsnippet

snippet ;bar "Overbar" iA
\\overbar{$1}$0
endsnippet

snippet ';polyring(\w+),(\w+)' "Polyring" riA
$1`!p
varSymbol = match.group(1)
arity= match.group(2)
result = '[' + varSymbol + '_1, \\dots, ' + varSymbol + '_{' + arity + '}]'
snip.rv = result`$0
endsnippet

snippet 'bigO "Big-O notation" iA
\\mathcal{O}($1)$0
endsnippet

snippet ;// "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

snippet ;grob "Groebner" iA
Gr\"obner$0
endsnippet

snippet ;piecefun "Big function" iA
\begin{cases}
$1 & $2 \\\\
$3 & $4 \\\\
\end{cases}$0
endsnippet

snippet ;index "Index" iA
[$1 : $2]$0
endsnippet

snippet ;aut "Aut" iA
\\Aut_{$1}{$2}$0
endsnippet

snippet ;spec "Spec" iA
\\spec{$1}$0
endsnippet

snippet ;mspec "m-Spec" iA
\\m-Spec{$1}$0
endsnippet

snippet ;gal "Gal" iA
\\Gal($1)$0
endsnippet

snippet ';prime(\d+)' "LaTeX array" riA
$1^{`!p
primes = ""
for _ in range(0, int(match.group(1))): primes += "\prime"
snip.rv = primes`}$0
endsnippet	

# Latex-related
snippet ;mk "Inline Math" iA
$$1$$0
endsnippet

snippet ;env "General Environment" iA
\begin{$1}
	$0
\end{$1}
endsnippet

snippet ;thm "Theorem Environment" iA
\begin{theorem}
	$0
\end{theorem}
endsnippet

snippet ;lemma "Lemma Environment" iA
\begin{lemma}
	$0
\end{lemma}
endsnippet

snippet ;def "Definition Environment" iA
\begin{definition}
	$0
\end{definition}
endsnippet

snippet ;cor "Corollary Environment" iA
\begin{corollary}
	$0
\end{corollary}
endsnippet

snippet ;eq "Equation Environment" iA
\begin{equation*}
	$0
\end{equation*}
endsnippet
 
snippet ;enum "Enumerate Environment" bA
\begin{enumerate}
	\item $0
\end{enumerate}
endsnippet

snippet ;itemi "Itemize Environment" bA
\begin{itemize}
	\item $0
\end{itemize}
endsnippet

snippet ;table "Table environment" iA
\begin{table}[${1:htpb}]
	\centering
	\caption{${2:caption}}
	\label{tab:${3:label}}
	\begin{tabular}{${5:c}}
	$0${5/((?<=.)c|l|r)|./(?1: & )/g}
	\end{tabular}
\end{table}
endsnippet

snippet ;fig "Figure environment" iA
\begin{figure}[${1:htpb}]
	\centering
	${2:\includegraphics[width=0.8\textwidth]{$3}}
	\caption{${4:$3}}
	\label{fig:${5:${3/\W+/-/g}}}
\end{figure}
endsnippet

snippet ';intro(\w+[,\w+[\s\w]*]*)  ' "Intro Knowledge" riA
`!p
stringify = []
kldb_file='/home/jose/Documents/GithubProjects/phd-thesis/Documents/Write-Ups/personal_notes/kldb.tex'
add_knowledge_cmd='/home/jose/.local/scripts/add-knowledge '
count = 0
for x in match.group(1).split(","): 
  if(count == 0):
    first_arg = x
	count += 1
	stringify.append("\'" + x + "\'")
command = 'if ! grep ' + kldb_file + ' -e \'index=' + first_arg + '}\'; then ' + add_knowledge_cmd + ' '.join(stringify) + '; fi'
os.system(command)
snip.rv = '\\intro{' + first_arg + '}'
`$0
endsnippet

snippet ;kl "Use Knowledge" iA
\\kl{$1}$0
endsnippet

snippet ;Kl "Use Knowledge" iA
\\kl[$2]{$1}$0
endsnippet

global !p
def create_matrix_placeholders(snip):
	anon_snippet_body = ""

	# Get start and end line number of expanded snippet
	start = snip.snippet_start[0]
	end = snip.snippet_end[0]

  # Append current line into anonymous snippet
	for i in range(start, end + 1):
		anon_snippet_body += snip.buffer[i]
		anon_snippet_body += "" if i == end else "\n"

	# Delete expanded snippet line till second to last line
	for i in range(start, end):
		del snip.buffer[start]

	# Empty last expanded snippet line while preserving the line
	snip.buffer[start] = ''

	# Expand anonymous snippet
	snip.expand_anon(anon_snippet_body)

def create_matrix(cols, rows, sep, start, end):
	res = ""
	placeholder = 1
	for _ in range(0, int(rows)):
		res += start + f"${placeholder} "
		placeholder += 1
		for _ in range(0, int(cols) - 1):
			res += sep + f" ${placeholder} "
			placeholder += 1
		res += end
	return res[:-1]
endglobal

post_jump "create_matrix_placeholders(snip)"
snippet ';matrix(\d+),(\d+)' "LaTeX array" br
\begin{array}{`!p
orient = ""
for _ in range(0, int(match.group(1))): orient += "l"
snip.rv = orient`}
`!p
snip.rv = create_matrix(match.group(1), match.group(2), "&", "\t", "\\\\\\\\\n")
`$0
\end{array}
endsnippet

snippet ;template "Basic template" iA
\documentclass[a4paper]{article}

\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{textcomp}
\usepackage[english]{babel}
\usepackage{amsmath, amssymb}

% figure support
\usepackage{import}
\usepackage{xifthen}
\pdfminorversion=7
\usepackage{pdfpages}
\usepackage{transparent}
\newcommand{\incfig}[1]{%
	\def\svgwidth{\columnwidth}
	\import{./figures/}{#1.pdf_tex}
}

\pdfsuppresswarningpagegroup=1
\title{$1}
\author{$2}
\date{\today}

\begin{document}

\maketitle

$0

\end{document}
endsnippet
